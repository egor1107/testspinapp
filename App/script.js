/**
 * Lucky Wheel - Telegram Mini App
 * –ò–≥—Ä–∞ "–†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á–∏" —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–≥—Ä–∞–¥ –∏ —Ñ–µ–π–∫–æ–≤–æ–π –ª–µ–Ω—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const WHEEL_CONFIG = [
  { label: "–ó–≤—ë–∑–¥—ã", count: 30, color: '#06b6d4' },
  { label: "–ü–æ–¥–∞—Ä–æ–∫", count: 12, color: '#f59e0b' },
  { label: "NFT", count: 5, color: '#8b5cf6' },
  { label: "Secret NFT", count: 1, color: '#ef4444' }
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
const REWARD_CONFIG = {
  'Secret NFT': { emoji: 'üíé', rarity: 'legendary' },
  'NFT': { emoji: 'üé®', rarity: 'epic' },
  '–ó–≤—ë–∑–¥—ã': { emoji: '‚≠ê', rarity: 'common' },
  '–ü–æ–¥–∞—Ä–æ–∫': { emoji: 'üéÅ', rarity: 'rare' }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã)
const HISTORY_CONFIG = [
  { type: 'stars', weight: 45 }, // 45% —à–∞–Ω—Å
  { type: 'gift', weight: 35 },  // 35% —à–∞–Ω—Å
  { type: 'nft', weight: 20 }    // 20% —à–∞–Ω—Å
  // Secret NFT –Ω–µ –≤–∫–ª—é—á–∞–µ–º, –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
];

// ==================== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ====================

let gameState = {
  spins: parseInt(localStorage.getItem('wheelSpins') || '0'),
  wins: parseInt(localStorage.getItem('wheelWins') || '0'),
  winStreak: parseInt(localStorage.getItem('winStreak') || '0'),
  currentStreak: parseInt(localStorage.getItem('currentStreak') || '0'),
  lastDaily: localStorage.getItem('lastDaily') || '0',
  soundEnabled: localStorage.getItem('soundEnabled') !== 'false',
  achievements: JSON.parse(localStorage.getItem('achievements') || '[]'),
  inventory: JSON.parse(localStorage.getItem('wheelInventory') || '{}'),
  currentSection: 'wheel'
};

// ==================== –ê–£–î–ò–û –°–ò–°–¢–ï–ú–ê ====================

let audioContext = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function initAudio() {
  if (!gameState.soundEnabled || audioContext) return;
  
  try {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  } catch (e) {
    console.log('Audio not supported');
  }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
 * @param {number} frequency - –ß–∞—Å—Ç–æ—Ç–∞ –∑–≤—É–∫–∞
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {string} type - –¢–∏–ø –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞
 */
function playSound(frequency, duration, type = 'sine') {
  if (!audioContext || !gameState.soundEnabled) return;

  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();

  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);

  oscillator.frequency.value = frequency;
  oscillator.type = type;

  gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
  gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);

  oscillator.start(audioContext.currentTime);
  oscillator.stop(audioContext.currentTime + duration);
}

// ==================== –§–û–ù–û–í–´–ï –ß–ê–°–¢–ò–¶–´ ====================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
 */
function initBackgroundParticles() {
  const container = document.getElementById('bgParticles');
  const particleCount = 20;

  for (let i = 0; i < particleCount; i++) {
    const particle = document.createElement('div');
    particle.className = 'bg-particle';
    particle.style.left = Math.random() * 100 + '%';
    particle.style.top = Math.random() * 100 + '%';
    particle.style.animationDelay = Math.random() * 8 + 's';
    container.appendChild(particle);
  }
}

// ==================== –°–ò–°–¢–ï–ú–ê –ù–ê–ì–†–ê–î ====================

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
 * @param {string} rewardName - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
 */
function addRewardToInventory(rewardName) {
  if (!gameState.inventory[rewardName]) {
    gameState.inventory[rewardName] = 0;
  }
  gameState.inventory[rewardName]++;
  localStorage.setItem('wheelInventory', JSON.stringify(gameState.inventory));
  updateInventoryDisplay();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function updateInventoryDisplay() {
  const inventoryGrid = document.getElementById('inventoryGrid');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  if (Object.keys(gameState.inventory).length === 0 ||
    Object.values(gameState.inventory).every(count => count === 0)) {
    inventoryGrid.innerHTML = `
      <div class="empty-inventory">
        <div class="empty-icon">üì¶</div>
        <div class="empty-text">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>
        <div class="empty-subtitle">–ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!</div>
      </div>
    `;
    return;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
  let inventoryHTML = '';
  Object.entries(gameState.inventory).forEach(([rewardName, count]) => {
    if (count > 0) {
      const reward = REWARD_CONFIG[rewardName];
      inventoryHTML += `
        <div class="reward-card">
          <div class="reward-rarity rarity-${reward.rarity}"></div>
          <div class="reward-image">${reward.emoji}</div>
          <div class="reward-name">${rewardName}</div>
          <div class="reward-count">x${count}</div>
        </div>
      `;
    }
  });

  inventoryGrid.innerHTML = inventoryHTML;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
 */
function updateProfileStats() {
  document.getElementById('profileSpins').textContent = gameState.spins;
}

// ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {string} section - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
 */
function showSection(section) {
  // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
  document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
  document.querySelectorAll('.nav-item').forEach(n => n.classList.remove('active'));

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
  document.getElementById(section + 'Section').classList.add('active');
  document.querySelector(`[onclick="showSection('${section}')"]`).classList.add('active');

  gameState.currentSection = section;

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
  if (section === 'profile') {
    updateProfileStats();
    updateInventoryDisplay();
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
 */
function toggleSound() {
  gameState.soundEnabled = !gameState.soundEnabled;
  localStorage.setItem('soundEnabled', gameState.soundEnabled);

  const slider = document.getElementById('soundSlider');
  if (gameState.soundEnabled) {
    slider.classList.add('active');
    initAudio();
    playSound(800, 0.1);
  } else {
    slider.classList.remove('active');
  }
}

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
function showBalanceModal() {
  const modal = document.getElementById('modal');
  const title = document.getElementById('modalTitle');
  const result = document.getElementById('modalResult');
  const message = document.getElementById('modalMessage');

  title.textContent = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞';
  result.textContent = 'üí≥';
  result.className = 'modal-result';
  message.textContent = '–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!';

  modal.classList.add('show');
}

// ==================== –°–ò–°–¢–ï–ú–ê –ö–û–õ–ï–°–ê ====================

const canvas = document.getElementById('wheel');
const ctx = canvas.getContext('2d');
const centerX = canvas.width / 2;
const centerY = canvas.height / 2;
const radius = Math.min(centerX, centerY) - 8;
const centerHoleRadius = 70; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ü–µ–Ω—Ç—Ä–∞

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const sectors = [];
WHEEL_CONFIG.forEach(item => {
  for (let i = 0; i < item.count; i++) {
    sectors.push({
      label: item.label,
      color: item.color
    });
  }
});

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞)
 * @param {Array} array - –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
 * @returns {Array} –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 */
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–µ–∫—Ç–æ—Ä—ã
shuffleArray(sectors);

const sectorAngle = (2 * Math.PI) / sectors.length;
let currentRotation = 0;
let selectedChoice = null;
let isSpinning = false;

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–µ—Å–∞
 * @param {number} rotationAngle - –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
 */
function drawWheel(rotationAngle = 0) {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // –í–Ω–µ—à–Ω—è—è —Ç–µ–Ω—å
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius + 4, 0, Math.PI * 2);
  ctx.shadowColor = 'rgba(148, 163, 184, 0.3)';
  ctx.shadowBlur = 12;
  ctx.shadowOffsetY = 4;
  ctx.fillStyle = 'rgba(148, 163, 184, 0.1)';
  ctx.fill();
  ctx.shadowBlur = 0;
  ctx.shadowOffsetY = 0;

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤
  for (let i = 0; i < sectors.length; i++) {
    const startAngle = rotationAngle + i * sectorAngle;
    const endAngle = startAngle + sectorAngle;

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
    const gradient = ctx.createRadialGradient(
      centerX, centerY, centerHoleRadius, 
      centerX, centerY, radius
    );
    gradient.addColorStop(0, sectors[i].color);
    gradient.addColorStop(1, sectors[i].color + 'CC'); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

    ctx.beginPath();
    ctx.fillStyle = gradient;
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, radius, startAngle, endAngle);
    ctx.lineTo(centerX, centerY);
    ctx.fill();

    // –ì—Ä–∞–Ω–∏—Ü–∞ —Å–µ–∫—Ç–æ—Ä–∞
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, radius, startAngle, endAngle);
    ctx.lineWidth = 1;
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
    ctx.stroke();
  }

  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
  const centerGradient = ctx.createRadialGradient(
    centerX, centerY, 0, 
    centerX, centerY, centerHoleRadius
  );
  centerGradient.addColorStop(0, '#f8fafc');
  centerGradient.addColorStop(1, '#e2e8f0');

  ctx.beginPath();
  ctx.fillStyle = centerGradient;
  ctx.arc(centerX, centerY, centerHoleRadius, 0, Math.PI * 2);
  ctx.fill();

  // –ì—Ä–∞–Ω–∏—Ü–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è
  ctx.beginPath();
  ctx.arc(centerX, centerY, centerHoleRadius, 0, Math.PI * 2);
  ctx.lineWidth = 2;
  ctx.strokeStyle = 'rgba(168, 85, 247, 0.3)';
  ctx.stroke();
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
 */
function spinWheel() {
  if (isSpinning) return;

  isSpinning = true;
  playSound(440, 0.2);

  const spinButton = document.getElementById('spinButton');
  const wheelContainer = document.getElementById('wheelContainer');
  const centerHub = document.getElementById('centerHub');
  const progressRing = document.getElementById('progressRing');
  const pointer = document.getElementById('pointer');

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
  spinButton.disabled = true;
  spinButton.classList.add('spinning');
  spinButton.textContent = '–ö—Ä—É—Ç–∏—Ç—Å—è...';
  wheelContainer.classList.add('spinning');
  centerHub.classList.add('spinning');
  centerHub.querySelector('.status-text').textContent = '–£–¥–∞—á–∞';
  centerHub.querySelector('.main-text').textContent = '–°–ü–ò–ù!';
  document.querySelectorAll('.bet-option').forEach(opt => opt.classList.add('disabled'));

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  progressRing.classList.add('active');

  // –†–∞—Å—á–µ—Ç –≤—Ä–∞—â–µ–Ω–∏—è
  const minSpins = 5;
  const maxSpins = 8;
  const spins = Math.floor(Math.random() * (maxSpins - minSpins + 1)) + minSpins;
  const finalAngle = Math.random() * 360;
  const totalRotation = spins * 360 + finalAngle;

  const startRotation = currentRotation;
  const endRotation = startRotation + totalRotation;
  const duration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã
  const startTime = performance.now();

  /**
   * –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
   * @param {number} currentTime - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
   */
  function animate(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);

    // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
    const easeOut = 1 - Math.pow(1 - progress, 3);
    currentRotation = startRotation + (endRotation - startRotation) * easeOut;

    drawWheel((currentRotation * Math.PI) / 180);

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏
    if (Math.floor(progress * 40) > Math.floor((progress - 0.01) * 40)) {
      playSound(200 + Math.random() * 100, 0.05);
    }

    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      finishSpin();
    }
  }

  requestAnimationFrame(animate);
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
function finishSpin() {
  // –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
  const normalizedRotation = ((currentRotation % 360) + 360) % 360;
  // –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–≤–µ—Ä—Ö—É (270 –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö canvas)
  const pointerPosition = 270;
  const adjustedAngle = (pointerPosition - normalizedRotation + 360) % 360;
  const sectorAngle = 360 / sectors.length;
  const sectorIndex = Math.floor(adjustedAngle / sectorAngle) % sectors.length;
  const result = sectors[sectorIndex].label;

  console.log('Debug - Rotation:', normalizedRotation, 'Adjusted:', adjustedAngle, 'Sector:', sectorIndex, 'Result:', result);
  const isWin = result === selectedChoice;

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  gameState.spins++;
  if (isWin) {
    gameState.wins++;
    gameState.currentStreak++;
    if (gameState.currentStreak > gameState.winStreak) {
      gameState.winStreak = gameState.currentStreak;
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    addRewardToInventory(result);
  } else {
    gameState.currentStreak = 0;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  localStorage.setItem('wheelSpins', gameState.spins);
  localStorage.setItem('wheelWins', gameState.wins);
  localStorage.setItem('winStreak', gameState.winStreak);
  localStorage.setItem('currentStreak', gameState.currentStreak);

  // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  if (isWin) {
    playSound(523.25, 0.3); // –î–æ
    if (result === 'Secret NFT') {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–≤—É–∫ –¥–∂–µ–∫–ø–æ—Ç–∞
      setTimeout(() => playSound(659.25, 0.3), 100); // –ú–∏
      setTimeout(() => playSound(783.99, 0.3), 200); // –°–æ–ª—å
    }
  } else {
    playSound(155.56, 0.5); // –ú–∏-–±–µ–º–æ–ª—å
  }

  // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const pointer = document.getElementById('pointer');
  pointer.classList.add('pulse');
  setTimeout(() => pointer.classList.remove('pulse'), 800);

  if (isWin) {
    createParticles();
    if (result === 'Secret NFT') {
      createConfetti();
    }
  }

  // –°–±—Ä–æ—Å UI
  setTimeout(() => {
    const spinButton = document.getElementById('spinButton');
    const wheelContainer = document.getElementById('wheelContainer');
    const centerHub = document.getElementById('centerHub');
    const progressRing = document.getElementById('progressRing');

    isSpinning = false;
    spinButton.disabled = false;
    spinButton.classList.remove('spinning');
    spinButton.textContent = '–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ';
    wheelContainer.classList.remove('spinning');
    centerHub.classList.remove('spinning');
    centerHub.querySelector('.main-text').textContent = '–°–¢–ê–†–¢!';
    document.querySelectorAll('.bet-option').forEach(opt => opt.classList.remove('disabled'));
    progressRing.classList.remove('active');

    showResult({ label: result }, isWin);
  }, 1000);
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—Ä–∞—â–µ–Ω–∏—è
 * @param {Object} result - –û–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @param {boolean} isWin - –§–ª–∞–≥ –≤—ã–∏–≥—Ä—ã—à–∞
 */
function showResult(result, isWin) {
  const modal = document.getElementById('modal');
  const title = document.getElementById('modalTitle');
  const modalResult = document.getElementById('modalResult');
  const message = document.getElementById('modalMessage');

  title.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞';
  modalResult.textContent = result.label;
  modalResult.className = `modal-result ${isWin ? 'win' : 'lose'}`;

  if (isWin) {
    message.textContent = 'üéâ –í—ã —É–≥–∞–¥–∞–ª–∏! –û—Ç–ª–∏—á–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è!';
  } else {
    message.textContent = '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!';
  }

  modal.classList.add('show');
}

// ==================== –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ====================

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
 */
function createParticles() {
  const container = document.getElementById('particles');
  const colors = ['#a855f7', '#ec4899', '#10b981', '#f59e0b', '#06b6d4'];

  for (let i = 0; i < 20; i++) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.style.width = (Math.random() * 6 + 4) + 'px';
    particle.style.height = particle.style.width;
    particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
    particle.style.left = Math.random() * 100 + '%';
    particle.style.top = Math.random() * 100 + '%';
    particle.style.opacity = '0.8';

    container.appendChild(particle);

    // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü—ã
    particle.animate([
      { transform: 'translate(0, 0) scale(1)', opacity: 0.8 },
      { 
        transform: `translate(${(Math.random() - 0.5) * 200}px, ${(Math.random() - 0.5) * 200}px) scale(0)`, 
        opacity: 0 
      }
    ], {
      duration: 1000 + Math.random() * 1000,
      easing: 'cubic-bezier(0.4, 0, 0.2, 1)'
    }).onfinish = () => particle.remove();
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –¥–∂–µ–∫–ø–æ—Ç–µ
 */
function createConfetti() {
  const container = document.getElementById('confetti');
  const colors = ['#a855f7', '#ec4899', '#10b981', '#f59e0b', '#06b6d4', '#ef4444'];

  for (let i = 0; i < 50; i++) {
    const confetti = document.createElement('div');
    confetti.className = 'confetti-piece';
    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
    confetti.style.left = Math.random() * 100 + '%';
    confetti.style.top = '-10px';

    container.appendChild(confetti);

    confetti.animate([
      { transform: 'translateY(-10px) rotate(0deg)', opacity: 1 },
      { 
        transform: `translateY(${window.innerHeight + 100}px) rotate(720deg)`, 
        opacity: 0 
      }
    ], {
      duration: 3000 + Math.random() * 2000,
      easing: 'cubic-bezier(0.4, 0, 0.2, 1)'
    }).onfinish = () => confetti.remove();
  }
}

// ==================== –°–ò–°–¢–ï–ú–ê –§–ï–ô–ö–û–í–û–ô –ò–°–¢–û–†–ò–ò ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã)
 * @returns {Object} –û–±—ä–µ–∫—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
 */
function getRandomHistoryItem() {
  const totalWeight = HISTORY_CONFIG.reduce((sum, item) => sum + item.weight, 0);
  let randomNum = Math.random() * totalWeight;

  let selectedItem = HISTORY_CONFIG[0];
  for (const item of HISTORY_CONFIG) {
    if (randomNum <= item.weight) {
      selectedItem = item;
      break;
    }
    randomNum -= item.weight;
  }

  return {
    type: selectedItem.type
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç)
 * @param {Object} item - –î–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @returns {HTMLElement} DOM —ç–ª–µ–º–µ–Ω—Ç
 */
function createHistoryItem(item) {
  const historyItem = document.createElement('div');
  historyItem.className = `history-item ${item.type}`;
  return historyItem;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
 */
function initHistoryFeed() {
  const historyTrack = document.getElementById('historyTrack');

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ª–µ–Ω—Ç—ã
  for (let i = 0; i < 15; i++) {
    const item = getRandomHistoryItem();
    const historyElement = createHistoryItem(item);
    historyTrack.appendChild(historyElement);
  }

  // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  setInterval(() => {
    const item = getRandomHistoryItem();
    const historyElement = createHistoryItem(item);
    historyTrack.appendChild(historyElement);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
    if (historyTrack.children.length > 20) {
      historyTrack.removeChild(historyTrack.firstChild);
    }
  }, 3000 + Math.random() * 2000); // –ö–∞–∂–¥—ã–µ 3-5 —Å–µ–∫—É–Ω–¥
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

document.addEventListener('DOMContentLoaded', function() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞
  drawWheel();
  initBackgroundParticles();
  initAudio();

  // –í—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏
  document.querySelectorAll('.bet-option').forEach(option => {
    option.addEventListener('click', function() {
      document.querySelectorAll('.bet-option').forEach(opt => opt.classList.remove('active'));
      this.classList.add('active');
      selectedChoice = this.dataset.choice;
      playSound(500, 0.1);
      
      // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–ø–∏–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞–≤–∫–∏
      document.getElementById('spinButton').disabled = false;
    });
  });

  // –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
  document.getElementById('spinButton').addEventListener('click', function() {
    if (!selectedChoice) {
      const modal = document.getElementById('modal');
      document.getElementById('modalTitle').textContent = '–û—à–∏–±–∫–∞';
      document.getElementById('modalResult').textContent = '‚ö†Ô∏è';
      document.getElementById('modalResult').className = 'modal-result';
      document.getElementById('modalMessage').textContent = '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É!';
      modal.classList.add('show');
      return;
    }
    spinWheel();
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  document.getElementById('modalButton').addEventListener('click', function() {
    document.getElementById('modal').classList.remove('show');

    // –°–±—Ä–æ—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ö–∞–±–∞
    const centerHub = document.getElementById('centerHub');
    centerHub.querySelector('.status-text').textContent = '–£–¥–∞—á–∞';
    centerHub.querySelector('.main-text').textContent = '–°–¢–ê–†–¢!';
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–ª–∏–∫–æ–º –≤–Ω–µ –µ–≥–æ
  document.getElementById('modal').addEventListener('click', function(e) {
    if (e.target === this) {
      this.classList.remove('show');
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –∑–≤—É–∫–∞
  const soundSlider = document.getElementById('soundSlider');
  if (gameState.soundEnabled) {
    soundSlider.classList.add('active');
  } else {
    soundSlider.classList.remove('active');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
  updateProfileStats();
  updateInventoryDisplay();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(initHistoryFeed, 1000);
});

// ==================== –ú–û–ë–ò–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ====================

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ pull-to-refresh
document.addEventListener('touchstart', function(e) {
  if (e.touches.length > 1) {
    e.preventDefault();
  }
});

let lastTouchEnd = 0;
document.addEventListener('touchend', function(e) {
  const now = (new Date()).getTime();
  if (now - lastTouchEnd <= 300) {
    e.preventDefault();
  }
  lastTouchEnd = now;
});

// ==================== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ====================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.showSection = showSection;
window.toggleSound = toggleSound;
window.showBalanceModal = showBalanceModal;
